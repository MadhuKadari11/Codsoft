# Required Libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, roc_auc_score

# Step 1: Load and preprocess the dataset
# Example: Load dataset (replace with your actual dataset)
# Assuming the dataset has features 'Amount', 'Time', and other anonymized features 'V1' to 'V28'
df = pd.read_csv('credit_card_transactions.csv')

# Step 2: Feature selection and preprocessing
X = df.drop(['Class'], axis=1)  # Features
y = df['Class']  # Target variable

# Standardize 'Amount' and 'Time' (optional, depending on dataset)
scaler = StandardScaler()
X[['Amount', 'Time']] = scaler.fit_transform(X[['Amount', 'Time']])

# Step 3: Split dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Model selection and training
# Logistic Regression
log_reg = LogisticRegression(max_iter=1000)
log_reg.fit(X_train, y_train)

# Decision Tree
dt_classifier = DecisionTreeClassifier(random_state=42)
dt_classifier.fit(X_train, y_train)

# Random Forest
rf_classifier = RandomForestClassifier(random_state=42)
rf_classifier.fit(X_train, y_train)

# Step 5: Model evaluation
def evaluate_model(model, X_test, y_test):
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    roc_auc = roc_auc_score(y_test, y_pred)
    print(f'Accuracy: {accuracy:.4f}')
    print(f'ROC AUC Score: {roc_auc:.4f}')
    print('Classification Report:')
    print(classification_report(y_test, y_pred))
    print('Confusion Matrix:')
    print(confusion_matrix(y_test, y_pred))

print('Logistic Regression:')
evaluate_model(log_reg, X_test, y_test)

print('\nDecision Tree:')
evaluate_model(dt_classifier, X_test, y_test)

print('\nRandom Forest:')
evaluate_model(rf_classifier, X_test, y_test)
